#!/usr/bin/env node

const commander = require('commander');
const sqlite = require('better-sqlite3');
const fetch = require('../src/fetch')
const _import = require('../src/import');
const tables = require('../src/tables');
const check = require('../src/exists');
const buildQuery = require('../src/buildQuery');
const mergeRouteIds = require('../src/mapRouteIds');
const { resolve } = require('path');
// global modules
path = require('path');
fs = require('fs');

commander
	.option("-u, --url <url>", "a URL source for GTFS static files")
	.option("-i, --import", "force import of GTFS data into sqlite")
	.option("-r, --routes <routeList>", "a comma separated list of route ids. A leading `!=` indicates excluded routes")
	.option("-t, --types <typeList>", "a comma separated list of route types. A leading `!=` indicates excluded types")
	.option("-m, --merge <mergeList>", "a comma separated list of input:output route ids (useful for renaming / consolidating like routes)")
	.parse(process.argv);

// check for database arg
if (commander.args.length === 0) { 
	console.error('No source database provided');
	process.exit(1);
}

const database = new sqlite(commander.args[0]);
database.pragma('journal_mode = WAL');
const filename = path.basename(commander.args[0], '.db');
const opts = commander.opts();
const directory = opts.url ? `${__dirname}/${filename}/` : `${__dirname}/`;
const tableNames = tables.map(o => o.name);

console.log("directory: " + directory)
console.log(tableNames);

if (opts.url || opts.import) {

	async function run() {
		console.log(opts.url)
		await check.directoryExists(directory);
		//await opts.url ? fetch(opts.url, filename, directory) : () => {};
		await fetch(opts.url, filename);
		await check.filesExist(tableNames);
		await _import(tables, database);
		await check.tablesExist(tableNames, database);
	};
	run();
}


else {gtfsSlice()}

function gtfsSlice() {
	const readOptions = {encoding:'utf8', flag:'r'};
	const createNewRouteIds =
    mergeRouteIds(
      fs.readFileSync(path.resolve('../src/sqlite_queries/mapRoutes.sql'), readOptions),
      commander.merge ? 
				commander.merge.split(':').map(r => r.split(',')) :
				[]);
	console.log(createNewRouteIds)			
	database.exec(createNewRouteIds);

  const createNetwork = 
    buildQuery(
      fs.readfileSync(path.resolve('../src/sqlite_queries/network.sql')),
      commander.types,
      commander.routes);

  // create temporary table 'network'
  database.exec(createNetwork);
}